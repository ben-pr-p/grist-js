// This file is auto-generated by @hey-api/openapi-ts

export const $Org = {
    type: 'object',
    required: ['id', 'name', 'domain', 'owner', 'createdAt', 'updatedAt', 'access'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 42
        },
        name: {
            type: 'string',
            example: 'Grist Labs'
        },
        domain: {
            type: 'string',
            nullable: true,
            example: 'gristlabs'
        },
        owner: {
            type: 'object',
            '$ref': '#/components/schemas/User',
            nullable: true
        },
        access: {
            type: 'string',
            '$ref': '#/components/schemas/Access'
        },
        createdAt: {
            type: 'string',
            example: '2019-09-13T15:42:35.000Z'
        },
        updatedAt: {
            type: 'string',
            example: '2019-09-13T15:42:35.000Z'
        }
    }
} as const;

export const $Orgs = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Org'
    }
} as const;

export const $Webhooks = {
    type: 'array',
    items: {
        '$ref': '#/components/schemas/Webhook'
    }
} as const;

export const $Webhook = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            example: 'xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
        },
        fields: {
            '$ref': '#/components/schemas/WebhookFields'
        },
        usage: {
            '$ref': '#/components/schemas/WebhookUsage'
        }
    }
} as const;

export const $WebhookFields = {
    allOf: [
        {
            '$ref': '#/components/schemas/WebhookPartialFields'
        },
        {
            '$ref': '#/components/schemas/WebhookRequiredFields'
        }
    ]
} as const;

export const $WebhookRequiredFields = {
    type: 'object',
    required: ['name', 'memo', 'url', 'enabled', 'unsubscribeKey', 'eventTypes', 'isReadyColumn', 'tableId'],
    properties: {
        unsubscribeKey: {
            type: 'string'
        }
    }
} as const;

export const $WebhookPartialFields = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'new-project-email',
            nullable: true
        },
        memo: {
            type: 'string',
            example: 'Send an email when a project is added',
            nullable: true
        },
        url: {
            type: 'string',
            format: 'uri',
            example: 'https://example.com/webhook/123'
        },
        enabled: {
            type: 'boolean'
        },
        eventTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            example: ['add', 'update']
        },
        isReadyColumn: {
            type: 'string',
            nullable: true,
            example: null
        },
        tableId: {
            type: 'string',
            example: 'Projects'
        }
    }
} as const;

export const $WebhookUsage = {
    type: 'object',
    nullable: true,
    required: ['numWaiting', 'status'],
    properties: {
        numWaiting: {
            type: 'integer'
        },
        status: {
            type: 'string',
            example: 'idle'
        },
        updatedTime: {
            type: 'number',
            nullable: true,
            format: 'UNIX epoch in milliseconds',
            example: 1685637500424
        },
        lastSuccessTime: {
            type: 'number',
            nullable: true,
            format: 'UNIX epoch in milliseconds',
            example: 1685637500424
        },
        lastFailureTime: {
            type: 'number',
            nullable: true,
            format: 'UNIX epoch in milliseconds',
            example: 1685637500424
        },
        lastErrorMessage: {
            type: 'string',
            nullable: true,
            example: null
        },
        lastHttpStatus: {
            type: 'number',
            nullable: true,
            example: 200
        },
        lastEventBatch: {
            '$ref': '#/components/schemas/WebhookBatchStatus'
        }
    }
} as const;

export const $WebhookBatchStatus = {
    type: 'object',
    nullable: true,
    required: ['size', 'attempts', 'status'],
    properties: {
        size: {
            type: 'number',
            example: 1
        },
        attempts: {
            type: 'number',
            example: 1
        },
        errorMessage: {
            type: 'string',
            nullable: true,
            example: null
        },
        httpStatus: {
            type: 'number',
            example: 200
        },
        status: {
            type: 'string',
            example: 'success'
        }
    }
} as const;

export const $WebhookId = {
    type: 'object',
    required: ['id'],
    properties: {
        id: {
            type: 'string',
            description: 'Webhook identifier',
            example: 'xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
        }
    }
} as const;

export const $WebhookRequiredProperties = {
    type: 'object',
    required: ['size'],
    properties: {
        size: {
            type: 'number',
            example: 1
        }
    }
} as const;

export const $Workspace = {
    type: 'object',
    required: ['id', 'name', 'access'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 97
        },
        name: {
            type: 'string',
            example: 'Secret Plans'
        },
        access: {
            type: 'string',
            '$ref': '#/components/schemas/Access'
        }
    }
} as const;

export const $Doc = {
    type: 'object',
    required: ['id', 'name', 'isPinned', 'urlId', 'access'],
    properties: {
        id: {
            type: 'string',
            example: 145
        },
        name: {
            type: 'string',
            example: 'Project Lollipop'
        },
        access: {
            type: 'string',
            '$ref': '#/components/schemas/Access'
        },
        isPinned: {
            type: 'boolean',
            example: true
        },
        urlId: {
            type: 'string',
            nullable: true,
            example: null
        }
    }
} as const;

export const $WorkspaceWithDocs = {
    allOf: [
        {
            '$ref': '#/components/schemas/Workspace'
        },
        {
            type: 'object',
            required: ['docs'],
            properties: {
                docs: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Doc'
                    }
                }
            }
        }
    ]
} as const;

export const $WorkspaceWithDocsAndDomain = {
    allOf: [
        {
            '$ref': '#/components/schemas/WorkspaceWithDocs'
        },
        {
            type: 'object',
            properties: {
                orgDomain: {
                    type: 'string',
                    example: 'gristlabs'
                }
            }
        }
    ]
} as const;

export const $WorkspaceWithOrg = {
    allOf: [
        {
            '$ref': '#/components/schemas/Workspace'
        },
        {
            type: 'object',
            required: ['org'],
            properties: {
                org: {
                    '$ref': '#/components/schemas/Org'
                }
            }
        }
    ]
} as const;

export const $WorkspaceWithDocsAndOrg = {
    allOf: [
        {
            '$ref': '#/components/schemas/WorkspaceWithDocs'
        },
        {
            '$ref': '#/components/schemas/WorkspaceWithOrg'
        }
    ]
} as const;

export const $DocWithWorkspace = {
    allOf: [
        {
            '$ref': '#/components/schemas/Doc'
        },
        {
            type: 'object',
            required: ['workspace'],
            properties: {
                workspace: {
                    '$ref': '#/components/schemas/WorkspaceWithOrg'
                }
            }
        }
    ]
} as const;

export const $User = {
    type: 'object',
    required: ['id', 'name', 'picture'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64',
            example: 101
        },
        name: {
            type: 'string',
            example: 'Helga Hufflepuff'
        },
        picture: {
            type: 'string',
            nullable: true,
            example: null
        }
    }
} as const;

export const $Access = {
    type: 'string',
    enum: ['owners', 'editors', 'viewers']
} as const;

export const $Data = {
    type: 'object',
    required: ['id'],
    properties: {
        id: {
            type: 'array',
            items: {
                type: 'integer'
            }
        }
    },
    additionalProperties: {
        type: 'array',
        items: {
            type: 'object'
        }
    },
    example: {
        id: [1, 2],
        pet: ['cat', 'dog'],
        popularity: [67, 95]
    }
} as const;

export const $DataWithoutId = {
    type: 'object',
    additionalProperties: {
        type: 'array',
        items: {
            type: 'object'
        }
    },
    example: {
        pet: ['cat', 'dog'],
        popularity: [67, 95]
    }
} as const;

export const $RecordsList = {
    type: 'object',
    required: ['records'],
    properties: {
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'fields'],
                properties: {
                    id: {
                        type: 'number',
                        example: 1
                    },
                    fields: {
                        type: 'object',
                        description: 'A JSON object mapping column names to [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues).'
                    }
                }
            }
        }
    },
    example: {
        records: [
            {
                id: 1,
                fields: {
                    pet: 'cat',
                    popularity: 67
                }
            },
            {
                id: 2,
                fields: {
                    pet: 'dog',
                    popularity: 95
                }
            }
        ]
    }
} as const;

export const $RecordsWithoutId = {
    type: 'object',
    required: ['records'],
    properties: {
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['fields'],
                properties: {
                    fields: {
                        type: 'object',
                        description: 'A JSON object mapping column names to [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues).'
                    }
                }
            }
        }
    },
    example: {
        records: [
            {
                fields: {
                    pet: 'cat',
                    popularity: 67
                }
            },
            {
                fields: {
                    pet: 'dog',
                    popularity: 95
                }
            }
        ]
    }
} as const;

export const $RecordsWithoutFields = {
    type: 'object',
    required: ['records'],
    properties: {
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id'],
                properties: {
                    id: {
                        type: 'number',
                        example: 1
                    }
                }
            }
        }
    },
    example: {
        records: [
            {
                id: 1
            },
            {
                id: 2
            }
        ]
    }
} as const;

export const $RecordsWithRequire = {
    type: 'object',
    required: ['records'],
    properties: {
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['require'],
                properties: {
                    require: {
                        type: 'object',
                        description: `keys are column identifiers, and values are [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues) we want to have in those columns (either by matching with an existing record, or creating a new record)
`
                    },
                    fields: {
                        type: 'object',
                        description: `keys are column identifiers, and values are [cell values](https://support.getgrist.com/code/interfaces/grist_plugin_api.rowrecord/#cellvalues) to place in those columns (either overwriting values in an existing record, or in a new record)
`
                    }
                }
            }
        }
    },
    example: {
        records: [
            {
                require: {
                    pet: 'cat'
                },
                fields: {
                    popularity: 67
                }
            },
            {
                require: {
                    pet: 'dog'
                },
                fields: {
                    popularity: 95
                }
            }
        ]
    }
} as const;

export const $TablesList = {
    type: 'object',
    required: ['tables'],
    properties: {
        tables: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'fields'],
                properties: {
                    id: {
                        type: 'string',
                        example: 'Table1'
                    },
                    fields: {
                        type: 'object'
                    }
                }
            }
        }
    },
    example: {
        tables: [
            {
                id: 'People',
                fields: {
                    tableRef: 1,
                    onDemand: true
                }
            },
            {
                id: 'Places',
                fields: {
                    tableRef: 2,
                    onDemand: false
                }
            }
        ]
    }
} as const;

export const $TablesWithoutFields = {
    type: 'object',
    required: ['tables'],
    properties: {
        tables: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id'],
                properties: {
                    id: {
                        type: 'string',
                        example: 'Table1'
                    }
                }
            }
        }
    },
    example: {
        tables: [
            {
                id: 'People'
            },
            {
                id: 'Places'
            }
        ]
    }
} as const;

export const $CreateTables = {
    type: 'object',
    required: ['tables'],
    properties: {
        tables: {
            type: 'array',
            items: {
                type: 'object',
                required: ['columns'],
                properties: {
                    id: {
                        type: 'string',
                        example: 'Table1'
                    },
                    columns: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                id: {
                                    type: 'string',
                                    example: 'ColumnName'
                                },
                                fields: {
                                    type: 'object'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    example: {
        tables: [
            {
                id: 'People',
                columns: [
                    {
                        id: 'pet',
                        fields: {
                            label: 'Pet'
                        }
                    },
                    {
                        id: 'popularity',
                        fields: {
                            label: 'Popularity ❤'
                        }
                    }
                ]
            }
        ]
    }
} as const;

export const $ColumnsList = {
    type: 'object',
    properties: {
        columns: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        example: 'ColumnName'
                    },
                    fields: {
                        '$ref': '#/components/schemas/GetFields'
                    }
                }
            }
        }
    },
    example: {
        columns: [
            {
                id: 'pet',
                fields: {
                    label: 'Pet'
                }
            },
            {
                id: 'popularity',
                fields: {
                    label: 'Popularity ❤',
                    type: 'Int'
                }
            }
        ]
    }
} as const;

export const $CreateColumns = {
    type: 'object',
    required: ['columns'],
    properties: {
        columns: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: 'Column identifier'
                    },
                    fields: {
                        '$ref': '#/components/schemas/CreateFields'
                    }
                }
            }
        }
    },
    example: {
        columns: [
            {
                id: 'pet',
                fields: {
                    label: 'Pet'
                }
            },
            {
                id: 'popularity',
                fields: {
                    label: 'Popularity ❤',
                    type: 'Int'
                }
            },
            {
                id: 'Order',
                fields: {
                    type: 'Ref:Orders',
                    visibleCol: 2
                }
            },
            {
                id: 'Formula',
                fields: {
                    type: 'Int',
                    formula: '$A + $B',
                    isFormula: true
                }
            },
            {
                id: 'Status',
                fields: {
                    type: 'Choice',
                    widgetOptions: '{"choices":["New","Old"],"choiceOptions":{"New":{"fillColor":"#FF0000","textColor":"#FFFFFF"}}}'
                }
            }
        ]
    }
} as const;

export const $UpdateColumns = {
    type: 'object',
    required: ['columns'],
    properties: {
        columns: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'fields'],
                properties: {
                    id: {
                        type: 'string',
                        description: 'Column identifier'
                    },
                    fields: {
                        allOf: [
                            {
                                '$ref': '#/components/schemas/CreateFields'
                            },
                            {
                                type: 'object',
                                properties: {
                                    colId: {
                                        type: 'string',
                                        description: 'Set it to the new column ID when you want to change it.'
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        }
    },
    example: {
        columns: [
            {
                id: 'pet',
                fields: {
                    label: 'Pet'
                }
            },
            {
                id: 'popularity',
                fields: {
                    label: 'Popularity ❤',
                    type: 'Int'
                }
            }
        ]
    }
} as const;

export const $ColumnsWithoutFields = {
    type: 'object',
    required: ['columns'],
    properties: {
        columns: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id'],
                properties: {
                    id: {
                        type: 'string',
                        example: 'ColumnName'
                    }
                }
            }
        }
    },
    example: {
        columns: [
            {
                id: 'pet'
            },
            {
                id: 'popularity'
            }
        ]
    }
} as const;

export const $Fields = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: 'Column type, by default Any. Ref, RefList and DateTime types requires a postfix, e.g. <code>DateTime:America/New_York</code>, <code>Ref:Users</code>'
        },
        label: {
            type: 'string',
            description: 'Column label.'
        },
        formula: {
            type: 'string',
            description: 'A python formula, e.g.: <code>$A + Table1.lookupOne(B=$B)</code>'
        },
        isFormula: {
            type: 'boolean',
            description: 'Use "true" to indicate that the column is a formula column. Use "false" for trigger formula column.'
        },
        widgetOptions: {
            type: 'string',
            description: 'A JSON object with widget options, e.g.: <code>{"choices": ["cat", "dog"], "alignment": "right"}</code>'
        },
        untieColIdFromLabel: {
            type: 'boolean',
            description: 'Use "true" to indicate that the column label should not be used as the column identifier. Use "false" to use the label as the identifier.'
        },
        recalcWhen: {
            type: 'integer',
            description: "A number indicating when the column should be recalculated. <ol start='0'><li>On new records or when any field in recalcDeps changes, it's a 'data-cleaning'.</li><li>Never.</li><li>Calculate on new records and on manual updates to any data field.</li></ol>"
        },
        visibleCol: {
            type: 'integer',
            description: 'For Ref and RefList columns, the colRef of a column to display'
        }
    }
} as const;

export const $CreateFields = {
    allOf: [
        {
            '$ref': '#/components/schemas/Fields'
        },
        {
            type: 'object',
            properties: {
                recalcDeps: {
                    type: 'string',
                    description: 'An encoded array of column identifiers (colRefs) that this column depends on. If any of these columns change, the column will be recalculated. E.g.: <code>[2, 3]</code>'
                }
            }
        }
    ]
} as const;

export const $GetFields = {
    allOf: [
        {
            '$ref': '#/components/schemas/Fields'
        },
        {
            type: 'object',
            properties: {
                recalcDeps: {
                    type: 'array',
                    items: {
                        type: 'integer'
                    },
                    description: 'An array of column identifiers (colRefs) that this column depends on, prefixed with "L" constant. If any of these columns change, the column will be recalculated. E.g.: <code>["L", 2, 3]</code>'
                },
                colRef: {
                    type: 'integer',
                    description: 'Column reference, e.g.: <code>2</code>'
                }
            }
        }
    ]
} as const;

export const $RowIds = {
    type: 'array',
    example: [101, 102, 103],
    items: {
        type: 'integer'
    }
} as const;

export const $DocParameters = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Competitive Analysis'
        },
        isPinned: {
            type: 'boolean',
            example: false
        }
    }
} as const;

export const $WorkspaceParameters = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'Retreat Docs'
        }
    }
} as const;

export const $OrgParameters = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            example: 'ACME Unlimited'
        }
    }
} as const;

export const $OrgAccessRead = {
    type: 'object',
    required: ['users'],
    properties: {
        users: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'name'],
                properties: {
                    id: {
                        type: 'integer',
                        example: 1
                    },
                    name: {
                        type: 'string',
                        example: 'Andrea'
                    },
                    email: {
                        type: 'string',
                        example: 'andrea@getgrist.com'
                    },
                    access: {
                        '$ref': '#/components/schemas/Access'
                    }
                }
            }
        }
    }
} as const;

export const $OrgAccessWrite = {
    type: 'object',
    required: ['users'],
    properties: {
        users: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['owners', 'editors', 'viewers', 'members', null]
            },
            example: {
                'foo@getgrist.com': 'owners',
                'bar@getgrist.com': null
            }
        }
    }
} as const;

export const $WorkspaceAccessRead = {
    type: 'object',
    required: ['maxInheritedRole', 'users'],
    properties: {
        maxInheritedRole: {
            '$ref': '#/components/schemas/Access'
        },
        users: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'name'],
                properties: {
                    id: {
                        type: 'integer',
                        example: 1
                    },
                    name: {
                        type: 'string',
                        example: 'Andrea'
                    },
                    email: {
                        type: 'string',
                        example: 'andrea@getgrist.com'
                    },
                    access: {
                        '$ref': '#/components/schemas/Access'
                    },
                    parentAccess: {
                        '$ref': '#/components/schemas/Access'
                    }
                }
            }
        }
    }
} as const;

export const $WorkspaceAccessWrite = {
    type: 'object',
    properties: {
        maxInheritedRole: {
            '$ref': '#/components/schemas/Access'
        },
        users: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['owners', 'editors', 'viewers', 'members', null]
            },
            example: {
                'foo@getgrist.com': 'owners',
                'bar@getgrist.com': null
            }
        }
    }
} as const;

export const $DocAccessWrite = {
    '$ref': '#/components/schemas/WorkspaceAccessWrite'
} as const;

export const $DocAccessRead = {
    '$ref': '#/components/schemas/WorkspaceAccessRead'
} as const;

export const $AttachmentUpload = {
    type: 'object',
    properties: {
        upload: {
            type: 'array',
            items: {
                type: 'string',
                format: 'binary'
            }
        }
    }
} as const;

export const $AttachmentId = {
    type: 'number',
    description: 'An integer ID'
} as const;

export const $AttachmentMetadata = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
            example: 'logo.png'
        },
        fileSize: {
            type: 'number',
            example: 12345
        },
        timeUploaded: {
            type: 'string',
            example: '2020-02-13T12:17:19.000Z'
        }
    }
} as const;

export const $AttachmentMetadataList = {
    type: 'object',
    required: ['records'],
    properties: {
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['id', 'fields'],
                properties: {
                    id: {
                        type: 'number',
                        example: 1
                    },
                    fields: {
                        '$ref': '#/components/schemas/AttachmentMetadata'
                    }
                }
            }
        }
    }
} as const;

export const $SqlResultSet = {
    type: 'object',
    required: ['statement', 'records'],
    properties: {
        statement: {
            type: 'string',
            description: 'A copy of the SQL statement.',
            example: 'select * from Pets ...'
        },
        records: {
            type: 'array',
            items: {
                type: 'object',
                required: ['fields'],
                properties: {
                    fields: {
                        type: 'object'
                    }
                }
            },
            example: [
                {
                    fields: {
                        id: 1,
                        pet: 'cat',
                        popularity: 67
                    }
                },
                {
                    fields: {
                        id: 2,
                        pet: 'dog',
                        popularity: 95
                    }
                }
            ]
        }
    }
} as const;

export const $TableSchemaResult = {
    type: 'object',
    required: ['name', 'title', 'schema'],
    properties: {
        name: {
            type: 'string',
            description: 'The ID (technical name) of the table'
        },
        title: {
            type: 'string',
            description: 'The human readable name of the table'
        },
        path: {
            type: 'string',
            description: 'The URL to download the CSV',
            example: 'https://getgrist.com/o/docs/api/docs/ID/download/csv?tableId=Table1&....'
        },
        format: {
            type: 'string',
            enum: ['csv']
        },
        mediatype: {
            type: 'string',
            enum: ['text/csv']
        },
        encoding: {
            type: 'string',
            enum: ['utf-8']
        },
        dialect: {
            '$schema': 'http://json-schema.org/draft-04/schema#',
            title: 'CSV Dialect',
            description: 'The CSV dialect descriptor.',
            type: ['string', 'object'],
            required: ['delimiter', 'doubleQuote'],
            properties: {
                csvddfVersion: {
                    title: 'CSV Dialect schema version',
                    description: 'A number to indicate the schema version of CSV Dialect. Version 1.0 was named CSV Dialect Description Format and used different field names.',
                    type: 'number',
                    default: 1.2,
                    'examples:': [`{
  "csvddfVersion": "1.2"
}
`]
                },
                delimiter: {
                    title: 'Delimiter',
                    description: 'A character sequence to use as the field separator.',
                    type: 'string',
                    default: ',',
                    examples: [`{
  "delimiter": ","
}
`, `{
  "delimiter": ";"
}
`]
                },
                doubleQuote: {
                    title: 'Double Quote',
                    description: 'Specifies the handling of quotes inside fields.',
                    context: 'If Double Quote is set to true, two consecutive quotes must be interpreted as one.',
                    type: 'boolean',
                    default: true,
                    examples: [`{
  "doubleQuote": true
}
`]
                },
                lineTerminator: {
                    title: 'Line Terminator',
                    description: 'Specifies the character sequence that must be used to terminate rows.',
                    type: 'string',
                    default: `
`,
                    examples: [`{
  "lineTerminator": "\r\n"
}
`, `{
  "lineTerminator": "\n"
}
`]
                },
                nullSequence: {
                    title: 'Null Sequence',
                    description: 'Specifies the null sequence, for example, `\\N`.',
                    type: 'string',
                    examples: [`{
  "nullSequence": "\N"
}
`]
                },
                quoteChar: {
                    title: 'Quote Character',
                    description: 'Specifies a one-character string to use as the quoting character.',
                    type: 'string',
                    default: '"',
                    examples: [`{
  "quoteChar": "'"
}
`]
                },
                escapeChar: {
                    title: 'Escape Character',
                    description: 'Specifies a one-character string to use as the escape character.',
                    type: 'string',
                    examples: [`{
  "escapeChar": "\\"
}
`]
                },
                skipInitialSpace: {
                    title: 'Skip Initial Space',
                    description: 'Specifies the interpretation of whitespace immediately following a delimiter. If false, whitespace immediately after a delimiter should be treated as part of the subsequent field.',
                    type: 'boolean',
                    default: false,
                    examples: [`{
  "skipInitialSpace": true
}
`]
                },
                header: {
                    title: 'Header',
                    description: 'Specifies if the file includes a header row, always as the first row in the file.',
                    type: 'boolean',
                    default: true,
                    examples: [`{
  "header": true
}
`]
                },
                commentChar: {
                    title: 'Comment Character',
                    description: 'Specifies that any row beginning with this one-character string, without preceeding whitespace, causes the entire line to be ignored.',
                    type: 'string',
                    examples: [`{
  "commentChar": "#"
}
`]
                },
                caseSensitiveHeader: {
                    title: 'Case Sensitive Header',
                    description: 'Specifies if the case of headers is meaningful.',
                    context: 'Use of case in source CSV files is not always an intentional decision. For example, should "CAT" and "Cat" be considered to have the same meaning.',
                    type: 'boolean',
                    default: false,
                    examples: [`{
  "caseSensitiveHeader": true
}
`]
                }
            },
            examples: [`{
  "dialect": {
    "delimiter": ";"
  }
}
`, `{
  "dialect": {
    "delimiter": "\t",
    "quoteChar": "'",
    "commentChar": "#"
  }
}
`]
        },
        schema: {
            '$schema': 'http://json-schema.org/draft-04/schema#',
            title: 'Table Schema',
            description: 'A Table Schema for this resource, compliant with the [Table Schema](/tableschema/) specification.',
            type: ['string', 'object'],
            required: ['fields'],
            properties: {
                fields: {
                    type: 'array',
                    minItems: 1,
                    items: {
                        title: 'Table Schema Field',
                        type: 'object',
                        oneOf: [
                            {
                                type: 'object',
                                title: 'String Field',
                                description: 'The field contains strings, that is, sequences of characters.',
                                required: ['name'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `string`.',
                                        enum: ['string']
                                    },
                                    format: {
                                        description: 'The format keyword options for `string` are `default`, `email`, `uri`, `binary`, and `uuid`.',
                                        context: `The following \`format\` options are supported:
  * **default**: any valid string.
  * **email**: A valid email address.
  * **uri**: A valid URI.
  * **binary**: A base64 encoded string representing binary data.
  * **uuid**: A string that is a uuid.`,
                                        enum: ['default', 'email', 'uri', 'binary', 'uuid'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `string` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            pattern: {
                                                type: 'string',
                                                description: 'A regular expression pattern to test each value of the property against, where a truthy response indicates validity.',
                                                context: 'Regular expressions `SHOULD` conform to the [XML Schema regular expression syntax](http://www.w3.org/TR/xmlschema-2/#regexs).'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the minimum length of a value.'
                                            },
                                            maxLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the maximum length of a value.'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "name",
  "type": "string"
}
`, `{
  "name": "name",
  "type": "string",
  "format": "email"
}
`, `{
  "name": "name",
  "type": "string",
  "constraints": {
    "minLength": 3,
    "maxLength": 35
  }
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Number Field',
                                description: 'The field contains numbers of any kind including decimals.',
                                context: `The lexical formatting follows that of decimal in [XMLSchema](https://www.w3.org/TR/xmlschema-2/#decimal): a non-empty finite-length sequence of decimal digits separated by a period as a decimal indicator. An optional leading sign is allowed. If the sign is omitted, '+' is assumed. Leading and trailing zeroes are optional. If the fractional part is zero, the period and following zero(es) can be omitted. For example: '-1.23', '12678967.543233', '+100000.00', '210'.

The following special string values are permitted (case does not need to be respected):
  - NaN: not a number
  - INF: positive infinity
  - -INF: negative infinity

A number \`MAY\` also have a trailing:
  - exponent: this \`MUST\` consist of an E followed by an optional + or - sign followed by one or more decimal digits (0-9)
  - percentage: the percentage sign: \`%\`. In conversion percentages should be divided by 100.

If both exponent and percentages are present the percentage \`MUST\` follow the exponent e.g. '53E10%' (equals 5.3).`,
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `number`.',
                                        enum: ['number']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `number`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    bareNumber: {
                                        type: 'boolean',
                                        title: 'bareNumber',
                                        description: 'a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `€95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.',
                                        default: true
                                    },
                                    decimalChar: {
                                        type: 'string',
                                        description: 'A string whose value is used to represent a decimal point within the number. The default value is `.`.'
                                    },
                                    groupChar: {
                                        type: 'string',
                                        description: "A string whose value is used to group digits within the number. The default value is `null`. A common value is `,` e.g. '100,000'."
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `number` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'number'
                                                        }
                                                    }
                                                ]
                                            },
                                            minimum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'number'
                                                    }
                                                ]
                                            },
                                            maximum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'number'
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "field-name",
  "type": "number"
}
`, `{
  "name": "field-name",
  "type": "number",
  "constraints": {
    "enum": [ "1.00", "1.50", "2.00" ]
  }
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Integer Field',
                                description: 'The field contains integers - that is whole numbers.',
                                context: 'Integer values are indicated in the standard way for any valid integer.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `integer`.',
                                        enum: ['integer']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `integer`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    bareNumber: {
                                        type: 'boolean',
                                        title: 'bareNumber',
                                        description: 'a boolean field with a default of `true`. If `true` the physical contents of this field must follow the formatting constraints already set out. If `false` the contents of this field may contain leading and/or trailing non-numeric characters (which implementors MUST therefore strip). The purpose of `bareNumber` is to allow publishers to publish numeric data that contains trailing characters such as percentages e.g. `95%` or leading characters such as currencies e.g. `€95` or `EUR 95`. Note that it is entirely up to implementors what, if anything, they do with stripped text.',
                                        default: true
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `integer` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'integer'
                                                        }
                                                    }
                                                ]
                                            },
                                            minimum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'integer'
                                                    }
                                                ]
                                            },
                                            maximum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'integer'
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "age",
  "type": "integer",
  "constraints": {
    "unique": true,
    "minimum": 100,
    "maximum": 9999
  }
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Date Field',
                                description: 'The field contains temporal date values.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `date`.',
                                        enum: ['date']
                                    },
                                    format: {
                                        description: 'The format keyword options for `date` are `default`, `any`, and `{PATTERN}`.',
                                        context: `The following \`format\` options are supported:
  * **default**: An ISO8601 format string of YYYY-MM-DD.
  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.
  * **{PATTERN}**: The value can be parsed according to \`{PATTERN}\`, which \`MUST\` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).`,
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `date` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minimum: {
                                                type: 'string'
                                            },
                                            maximum: {
                                                type: 'string'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "date_of_birth",
  "type": "date"
}
`, `{
  "name": "date_of_birth",
  "type": "date",
  "constraints": {
    "minimum": "01-01-1900"
  }
}
`, `{
  "name": "date_of_birth",
  "type": "date",
  "format": "MM-DD-YYYY"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Time Field',
                                description: 'The field contains temporal time values.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `time`.',
                                        enum: ['time']
                                    },
                                    format: {
                                        description: 'The format keyword options for `time` are `default`, `any`, and `{PATTERN}`.',
                                        context: `The following \`format\` options are supported:
  * **default**: An ISO8601 format string for time.
  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.
  * **{PATTERN}**: The value can be parsed according to \`{PATTERN}\`, which \`MUST\` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).`,
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `time` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minimum: {
                                                type: 'string'
                                            },
                                            maximum: {
                                                type: 'string'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "appointment_start",
  "type": "time"
}
`, `{
  "name": "appointment_start",
  "type": "time",
  "format": "any"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Date Time Field',
                                description: 'The field contains temporal datetime values.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `datetime`.',
                                        enum: ['datetime']
                                    },
                                    format: {
                                        description: 'The format keyword options for `datetime` are `default`, `any`, and `{PATTERN}`.',
                                        context: `The following \`format\` options are supported:
  * **default**: An ISO8601 format string for datetime.
  * **any**: Any parsable representation of a date. The implementing library can attempt to parse the datetime via a range of strategies.
  * **{PATTERN}**: The value can be parsed according to \`{PATTERN}\`, which \`MUST\` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).`,
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `datetime` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minimum: {
                                                type: 'string'
                                            },
                                            maximum: {
                                                type: 'string'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "timestamp",
  "type": "datetime"
}
`, `{
  "name": "timestamp",
  "type": "datetime",
  "format": "default"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Year Field',
                                description: 'A calendar year, being an integer with 4 digits. Equivalent to [gYear in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYear)',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `year`.',
                                        enum: ['year']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `year`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `year` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'integer'
                                                        }
                                                    }
                                                ]
                                            },
                                            minimum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'integer'
                                                    }
                                                ]
                                            },
                                            maximum: {
                                                oneOf: [
                                                    {
                                                        type: 'string'
                                                    },
                                                    {
                                                        type: 'integer'
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "year",
  "type": "year"
}
`, `{
  "name": "year",
  "type": "year",
  "constraints": {
    "minimum": 1970,
    "maximum": 2003
  }
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Year Month Field',
                                description: 'A calendar year month, being an integer with 1 or 2 digits. Equivalent to [gYearMonth in XML Schema](https://www.w3.org/TR/xmlschema-2/#gYearMonth)',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `yearmonth`.',
                                        enum: ['yearmonth']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `yearmonth`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `yearmonth` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minimum: {
                                                type: 'string'
                                            },
                                            maximum: {
                                                type: 'string'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "month",
  "type": "yearmonth"
}
`, `{
  "name": "month",
  "type": "yearmonth",
  "constraints": {
    "minimum": 1,
    "maximum": 6
  }
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Boolean Field',
                                description: 'The field contains boolean (true/false) data.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `boolean`.',
                                        enum: ['boolean']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `boolean`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    trueValues: {
                                        type: 'array',
                                        minItems: 1,
                                        items: {
                                            type: 'string'
                                        },
                                        default: ['true', 'True', 'TRUE', '1']
                                    },
                                    falseValues: {
                                        type: 'array',
                                        minItems: 1,
                                        items: {
                                            type: 'string'
                                        },
                                        default: ['false', 'False', 'FALSE', '0']
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `boolean` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'boolean'
                                                }
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "registered",
  "type": "boolean"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Object Field',
                                description: 'The field contains data which can be parsed as a valid JSON object.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `object`.',
                                        enum: ['object']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `object`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints apply for `object` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'object'
                                                        }
                                                    }
                                                ]
                                            },
                                            minLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the minimum length of a value.'
                                            },
                                            maxLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the maximum length of a value.'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "extra"
  "type": "object"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'GeoPoint Field',
                                description: 'The field contains data describing a geographic point.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `geopoint`.',
                                        enum: ['geopoint']
                                    },
                                    format: {
                                        description: 'The format keyword options for `geopoint` are `default`,`array`, and `object`.',
                                        context: `The following \`format\` options are supported:
  * **default**: A string of the pattern 'lon, lat', where \`lon\` is the longitude and \`lat\` is the latitude.
  * **array**: An array of exactly two items, where each item is either a number, or a string parsable as a number, and the first item is \`lon\` and the second item is \`lat\`.
  * **object**: A JSON object with exactly two keys, \`lat\` and \`lon\``,
                                        notes: ['Implementations `MUST` strip all white space in the default format of `lon, lat`.'],
                                        enum: ['default', 'array', 'object'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `geopoint` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'array'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'object'
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "post_office",
  "type": "geopoint"
}
`, `{
  "name": "post_office",
  "type": "geopoint",
  "format": "array"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'GeoJSON Field',
                                description: 'The field contains a JSON object according to GeoJSON or TopoJSON',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `geojson`.',
                                        enum: ['geojson']
                                    },
                                    format: {
                                        description: 'The format keyword options for `geojson` are `default` and `topojson`.',
                                        context: `The following \`format\` options are supported:
  * **default**: A geojson object as per the [GeoJSON spec](http://geojson.org/).
  * **topojson**: A topojson object as per the [TopoJSON spec](https://github.com/topojson/topojson-specification/blob/master/README.md)`,
                                        enum: ['default', 'topojson'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `geojson` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'object'
                                                        }
                                                    }
                                                ]
                                            },
                                            minLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the minimum length of a value.'
                                            },
                                            maxLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the maximum length of a value.'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "city_limits",
  "type": "geojson"
}
`, `{
  "name": "city_limits",
  "type": "geojson",
  "format": "topojson"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Array Field',
                                description: 'The field contains data which can be parsed as a valid JSON array.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `array`.',
                                        enum: ['array']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `array`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints apply for `array` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                oneOf: [
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'string'
                                                        }
                                                    },
                                                    {
                                                        type: 'array',
                                                        minItems: 1,
                                                        uniqueItems: true,
                                                        items: {
                                                            type: 'array'
                                                        }
                                                    }
                                                ]
                                            },
                                            minLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the minimum length of a value.'
                                            },
                                            maxLength: {
                                                type: 'integer',
                                                description: 'An integer that specifies the maximum length of a value.'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "options"
  "type": "array"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Duration Field',
                                description: 'The field contains a duration of time.',
                                context: "The lexical representation for duration is the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations) extended format `PnYnMnDTnHnMnS`, where `nY` represents the number of years, `nM` the number of months, `nD` the number of days, 'T' is the date/time separator, `nH` the number of hours, `nM` the number of minutes and `nS` the number of seconds. The number of seconds can include decimal digits to arbitrary precision. Date and time elements including their designator may be omitted if their value is zero, and lower order elements may also be omitted for reduced precision. Here we follow the definition of [XML Schema duration datatype](http://www.w3.org/TR/xmlschema-2/#duration) directly and that definition is implicitly inlined here.",
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `duration`.',
                                        enum: ['duration']
                                    },
                                    format: {
                                        description: 'There are no format keyword options for `duration`: only `default` is allowed.',
                                        enum: ['default'],
                                        default: 'default'
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints are supported for `duration` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true,
                                                items: {
                                                    type: 'string'
                                                }
                                            },
                                            minimum: {
                                                type: 'string'
                                            },
                                            maximum: {
                                                type: 'string'
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "period"
  "type": "duration"
}
`]
                            },
                            {
                                type: 'object',
                                title: 'Any Field',
                                description: 'Any value is accepted, including values that are not captured by the type/format/constraint requirements of the specification.',
                                required: ['name', 'type'],
                                properties: {
                                    name: {
                                        title: 'Name',
                                        description: 'A name for this field.',
                                        type: 'string'
                                    },
                                    title: {
                                        title: 'Title',
                                        description: 'A human-readable title.',
                                        type: 'string',
                                        examples: [`{
  "title": "My Package Title"
}
`]
                                    },
                                    description: {
                                        title: 'Description',
                                        description: 'A text description. Markdown is encouraged.',
                                        type: 'string',
                                        examples: [`{
  "description": "# My Package description\nAll about my package."
}
`]
                                    },
                                    example: {
                                        title: 'Example',
                                        description: 'An example value for the field.',
                                        type: 'string',
                                        examples: [`{
  "example": "Put here an example value for your field"
}
`]
                                    },
                                    type: {
                                        description: 'The type keyword, which `MUST` be a value of `any`.',
                                        enum: ['any']
                                    },
                                    constraints: {
                                        title: 'Constraints',
                                        description: 'The following constraints apply to `any` fields.',
                                        type: 'object',
                                        properties: {
                                            required: {
                                                type: 'boolean',
                                                description: 'Indicates whether a property must have a value for each instance.',
                                                context: 'An empty string is considered to be a missing value.'
                                            },
                                            unique: {
                                                type: 'boolean',
                                                description: 'When `true`, each value for the property `MUST` be unique.'
                                            },
                                            enum: {
                                                type: 'array',
                                                minItems: 1,
                                                uniqueItems: true
                                            }
                                        }
                                    },
                                    rdfType: {
                                        type: 'string',
                                        description: 'The RDF type for this field.'
                                    }
                                },
                                examples: [`{
  "name": "notes",
  "type": "any"
`]
                            }
                        ]
                    },
                    description: 'An `array` of Table Schema Field objects.',
                    examples: [`{
  "fields": [
    {
      "name": "my-field-name"
    }
  ]
}
`, `{
  "fields": [
    {
      "name": "my-field-name",
      "type": "number"
    },
    {
      "name": "my-field-name-2",
      "type": "string",
      "format": "email"
    }
  ]
}
`]
                },
                primaryKey: {
                    oneOf: [
                        {
                            type: 'array',
                            minItems: 1,
                            uniqueItems: true,
                            items: {
                                type: 'string'
                            }
                        },
                        {
                            type: 'string'
                        }
                    ],
                    description: 'A primary key is a field name or an array of field names, whose values `MUST` uniquely identify each row in the table.',
                    context: 'Field name in the `primaryKey` `MUST` be unique, and `MUST` match a field name in the associated table. It is acceptable to have an array with a single value, indicating that the value of a single field is the primary key.',
                    examples: [`{
  "primaryKey": [
    "name"
  ]
}
`, `{
  "primaryKey": [
    "first_name",
    "last_name"
  ]
}
`]
                },
                foreignKeys: {
                    type: 'array',
                    minItems: 1,
                    items: {
                        title: 'Table Schema Foreign Key',
                        description: 'Table Schema Foreign Key',
                        type: 'object',
                        required: ['fields', 'reference'],
                        oneOf: [
                            {
                                properties: {
                                    fields: {
                                        type: 'array',
                                        items: {
                                            type: 'string',
                                            minItems: 1,
                                            uniqueItems: true,
                                            description: 'Fields that make up the primary key.'
                                        }
                                    },
                                    reference: {
                                        type: 'object',
                                        required: ['resource', 'fields'],
                                        properties: {
                                            resource: {
                                                type: 'string',
                                                default: ''
                                            },
                                            fields: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                minItems: 1,
                                                uniqueItems: true
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                properties: {
                                    fields: {
                                        type: 'string',
                                        description: 'Fields that make up the primary key.'
                                    },
                                    reference: {
                                        type: 'object',
                                        required: ['resource', 'fields'],
                                        properties: {
                                            resource: {
                                                type: 'string',
                                                default: ''
                                            },
                                            fields: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    examples: [`{
  "foreignKeys": [
    {
      "fields": "state",
      "reference": {
        "resource": "the-resource",
        "fields": "state_id"
      }
    }
  ]
}
`, `{
  "foreignKeys": [
    {
      "fields": "state",
      "reference": {
        "resource": "",
        "fields": "id"
      }
    }
  ]
}
`]
                },
                missingValues: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    default: [''],
                    description: "Values that when encountered in the source, should be considered as `null`, 'not present', or 'blank' values.",
                    context: `Many datasets arrive with missing data values, either because a value was not collected or it never existed.
Missing values may be indicated simply by the value being empty in other cases a special value may have been used e.g. \`-\`, \`NaN\`, \`0\`, \`-9999\` etc.
The \`missingValues\` property provides a way to indicate that these values should be interpreted as equivalent to null.

\`missingValues\` are strings rather than being the data type of the particular field. This allows for comparison prior to casting and for fields to have missing value which are not of their type, for example a \`number\` field to have missing values indicated by \`-\`.

The default value of \`missingValue\` for a non-string type field is the empty string \`''\`. For string type fields there is no default for \`missingValue\` (for string fields the empty string \`''\` is a valid value and need not indicate null).`,
                    examples: [`{
  "missingValues": [
    "-",
    "NaN",
    ""
  ]
}
`, `{
  "missingValues": []
}
`]
                }
            },
            examples: [`{
  "schema": {
    "fields": [
      {
        "name": "first_name",
        "type": "string"
        "constraints": {
          "required": true
        }
      },
      {
        "name": "age",
        "type": "integer"
      },
    ],
    "primaryKey": [
      "name"
    ]
  }
}
`]
        }
    }
} as const;